// Code generated by MockGen. DO NOT EDIT.
// Source: movies/service/movie_service.go
//
// Generated by this command:
//
//	mockgen -source=movies/service/movie_service.go -destination=movies/mock/movie_service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	model "go-movie-api/movies/model"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockMovieService is a mock of MovieService interface.
type MockMovieService struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceMockRecorder
	isgomock struct{}
}

// MockMovieServiceMockRecorder is the mock recorder for MockMovieService.
type MockMovieServiceMockRecorder struct {
	mock *MockMovieService
}

// NewMockMovieService creates a new mock instance.
func NewMockMovieService(ctrl *gomock.Controller) *MockMovieService {
	mock := &MockMovieService{ctrl: ctrl}
	mock.recorder = &MockMovieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieService) EXPECT() *MockMovieServiceMockRecorder {
	return m.recorder
}

// AddMovieToCart mocks base method.
func (m *MockMovieService) AddMovieToCart(ctx *gin.Context, req model.AddMovieToCartRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovieToCart", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMovieToCart indicates an expected call of AddMovieToCart.
func (mr *MockMovieServiceMockRecorder) AddMovieToCart(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovieToCart", reflect.TypeOf((*MockMovieService)(nil).AddMovieToCart), ctx, req)
}

// GetMovieDetails mocks base method.
func (m *MockMovieService) GetMovieDetails(ctx *gin.Context, req model.GetMovieDetailsRequest) (model.GetMovieDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieDetails", ctx, req)
	ret0, _ := ret[0].(model.GetMovieDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieDetails indicates an expected call of GetMovieDetails.
func (mr *MockMovieServiceMockRecorder) GetMovieDetails(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieDetails", reflect.TypeOf((*MockMovieService)(nil).GetMovieDetails), ctx, req)
}

// GetMoviesInCart mocks base method.
func (m *MockMovieService) GetMoviesInCart(ctx *gin.Context, req model.GetMoviesInCartReq) ([]model.MovieDetailsInCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesInCart", ctx, req)
	ret0, _ := ret[0].([]model.MovieDetailsInCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesInCart indicates an expected call of GetMoviesInCart.
func (mr *MockMovieServiceMockRecorder) GetMoviesInCart(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesInCart", reflect.TypeOf((*MockMovieService)(nil).GetMoviesInCart), ctx, req)
}

// SearchMovies mocks base method.
func (m *MockMovieService) SearchMovies(ctx *gin.Context, req model.SearchMovieRequest) ([]model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovies", ctx, req)
	ret0, _ := ret[0].([]model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovies indicates an expected call of SearchMovies.
func (mr *MockMovieServiceMockRecorder) SearchMovies(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovies", reflect.TypeOf((*MockMovieService)(nil).SearchMovies), ctx, req)
}
