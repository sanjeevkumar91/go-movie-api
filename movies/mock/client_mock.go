// Code generated by MockGen. DO NOT EDIT.
// Source: movies/client/client.go
//
// Generated by this command:
//
//	mockgen -source=movies/client/client.go -destination=movies/mock/client_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	model "go-movie-api/movies/model"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetMovieDetails mocks base method.
func (m *MockClient) GetMovieDetails(ctx *gin.Context, request model.GetMovieDetailsRequest) (model.GetMovieDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieDetails", ctx, request)
	ret0, _ := ret[0].(model.GetMovieDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieDetails indicates an expected call of GetMovieDetails.
func (mr *MockClientMockRecorder) GetMovieDetails(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieDetails", reflect.TypeOf((*MockClient)(nil).GetMovieDetails), ctx, request)
}

// GetMovieDetailsById mocks base method.
func (m *MockClient) GetMovieDetailsById(ctx *gin.Context, request model.AddMovieToCartRequest) (model.GetMovieDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieDetailsById", ctx, request)
	ret0, _ := ret[0].(model.GetMovieDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieDetailsById indicates an expected call of GetMovieDetailsById.
func (mr *MockClientMockRecorder) GetMovieDetailsById(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieDetailsById", reflect.TypeOf((*MockClient)(nil).GetMovieDetailsById), ctx, request)
}

// SearchMovies mocks base method.
func (m *MockClient) SearchMovies(ctx *gin.Context, request model.SearchMovieRequest) (model.SearchMovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovies", ctx, request)
	ret0, _ := ret[0].(model.SearchMovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovies indicates an expected call of SearchMovies.
func (mr *MockClientMockRecorder) SearchMovies(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovies", reflect.TypeOf((*MockClient)(nil).SearchMovies), ctx, request)
}
